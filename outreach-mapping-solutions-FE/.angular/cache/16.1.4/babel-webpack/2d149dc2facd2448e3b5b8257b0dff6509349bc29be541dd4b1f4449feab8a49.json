{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/client-portal.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@ng-bootstrap/ng-bootstrap\";\nconst _c0 = [\"editClientBasicInformationModal\"];\nconst _c1 = [\"exitWithoutSavingBtn\"];\nfunction DemographicsEditComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"h4\", 3);\n    i0.ɵɵtext(2, \"Profile update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function DemographicsEditComponent_ng_template_0_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const modal_r2 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(modal_r2.dismiss(\"Cross click\"));\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"div\", 5)(5, \"form\")(6, \"div\", 6)(7, \"label\", 7);\n    i0.ɵɵtext(8, \"Date of birth\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 8);\n    i0.ɵɵelement(10, \"input\", 9, 10);\n    i0.ɵɵelementStart(12, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function DemographicsEditComponent_ng_template_0_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const _r3 = i0.ɵɵreference(11);\n      return i0.ɵɵresetView(_r3.toggle());\n    });\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(13, \"div\", 12)(14, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function DemographicsEditComponent_ng_template_0_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const modal_r2 = restoredCtx.$implicit;\n      return i0.ɵɵresetView(modal_r2.close(\"Save click\"));\n    });\n    i0.ɵɵtext(15, \"Save\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class DemographicsEditComponent {\n  constructor(clientPortalService, route, router, renderer) {\n    this.clientPortalService = clientPortalService;\n    this.route = route;\n    this.router = router;\n    this.renderer = renderer;\n    this.updatedClient = new EventEmitter();\n    this.updatedClientDemographics = new EventEmitter();\n    this.raceSelections = [\"Black/African-American\", \"White/Caucasian\", \"Asian/Pacific Islander\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\", \"Not Applicable\"];\n    this.ethnicitySelections = [\"Hispanic\", \"Non-Hispanic\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\"];\n    this.genderSelections = [\"Male\", \"Female\", \"Trans Male-to-Female\", \"Trans Female-to-Male\", \"Non-Binary\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\"];\n    this.veteranSelections = [\"Veteran\", \"Not a Veteran\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\", \"Not Applicable\"];\n    // confirmation(){\n    //     if(confirm(\"Are you sure you want to exit without saving?\")){\n    //       this.dismissModal();\n    //     } else{\n    //     }\n    //   }\n    this.confirmed = false;\n    this.dataQuality = this.clientPortalService.dataQuality;\n    this.monthsDays = this.clientPortalService.monthsDays;\n    this.formClientReturned = this.updatedFormClient;\n    this.formClientDemographics = this.updatedFormClientDemographics;\n    this.clientPortalService.days.subscribe(days => {\n      this.days = days;\n    });\n  }\n  ngOnInit() {\n    this.formClientReturned = {\n      ...this.updatedFormClient\n    };\n    this.formClientDemographics = {\n      ...this.updatedFormClientDemographics\n    };\n  }\n  monthSelected(event) {\n    this.clientPortalService.selectedMonth(event);\n  }\n  clientDobMonth(month) {\n    this.clientPortalService.clientDobMonth(month);\n  }\n  saveUpdatedFormData() {\n    this.clientPortalService.updateClient(this.formClientReturned);\n    this.updatedClient.emit(this.formClientReturned);\n    this.updatedClientDemographics.emit(this.formClientDemographics);\n  }\n  confirmation() {\n    if (confirm(\"Are you sure you want to exit without saving?\")) {\n      this.exitWithoutSavingBtn.nativeElement.setAttribute('data-bs-dismiss', 'modal');\n      this.dismissModal();\n      this.exitWithoutSavingBtn.nativeElement.removeAttribute('data-bs-dismiss');\n    } else {}\n  }\n  resetFormFields() {\n    this.formClientReturned = {\n      ...this.updatedFormClient\n    };\n    this.formClientDemographics = {\n      ...this.updatedFormClientDemographics\n    };\n  }\n  dismissModal() {\n    this.resetFormFields();\n    const modalElement = this.editClientBasicInformationModal.nativeElement;\n    modalElement.classList.remove('show');\n    modalElement.style.display = 'none';\n    document.body.classList.remove('modal-open');\n    const modalBackdropElement = document.querySelector('.modal-backdrop');\n    if (modalBackdropElement) {\n      modalBackdropElement.remove();\n    }\n    const closeButton = modalElement.querySelector('.exitWithoutSavingBtn');\n    if (closeButton) {\n      this.renderer.listen(closeButton, 'click', () => {});\n      closeButton.click();\n    }\n  }\n}\nDemographicsEditComponent.ɵfac = function DemographicsEditComponent_Factory(t) {\n  return new (t || DemographicsEditComponent)(i0.ɵɵdirectiveInject(i1.ClientPortalService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\nDemographicsEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DemographicsEditComponent,\n  selectors: [[\"app-demographics-edit\"]],\n  viewQuery: function DemographicsEditComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editClientBasicInformationModal = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.exitWithoutSavingBtn = _t.first);\n    }\n  },\n  inputs: {\n    updatedFormClient: \"updatedFormClient\",\n    updatedFormClientDemographics: \"updatedFormClientDemographics\"\n  },\n  outputs: {\n    updatedClient: \"updatedClient\",\n    updatedClientDemographics: \"updatedClientDemographics\"\n  },\n  decls: 8,\n  vars: 1,\n  consts: [[\"content\", \"\"], [1, \"btn\", \"btn-lg\", \"btn-outline-primary\", 3, \"click\"], [1, \"modal-header\"], [\"id\", \"modal-basic-title\", 1, \"modal-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [1, \"modal-body\"], [1, \"mb-3\"], [\"for\", \"dateOfBirth\"], [1, \"input-group\"], [\"id\", \"dateOfBirth\", \"placeholder\", \"yyyy-mm-dd\", \"name\", \"dp\", \"ngbDatepicker\", \"\", 1, \"form-control\"], [\"dp\", \"ngbDatepicker\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", \"bi\", \"bi-calendar3\", 3, \"click\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-dark\", 3, \"click\"]],\n  template: function DemographicsEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r8 = i0.ɵɵgetCurrentView();\n      i0.ɵɵtemplate(0, DemographicsEditComponent_ng_template_0_Template, 16, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(2, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function DemographicsEditComponent_Template_button_click_2_listener() {\n        i0.ɵɵrestoreView(_r8);\n        const _r0 = i0.ɵɵreference(1);\n        return i0.ɵɵresetView(ctx.open(_r0));\n      });\n      i0.ɵɵtext(3, \"Launch demo modal\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"pre\");\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(7, \" -->\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate(ctx.closeResult);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm, i4.NgbInputDatepicker],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["EventEmitter","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","DemographicsEditComponent_ng_template_0_Template_button_click_3_listener","restoredCtx","ɵɵrestoreView","_r5","modal_r2","$implicit","ɵɵresetView","dismiss","ɵɵelement","DemographicsEditComponent_ng_template_0_Template_button_click_12_listener","_r3","ɵɵreference","toggle","DemographicsEditComponent_ng_template_0_Template_button_click_14_listener","close","DemographicsEditComponent","constructor","clientPortalService","route","router","renderer","updatedClient","updatedClientDemographics","raceSelections","ethnicitySelections","genderSelections","veteranSelections","confirmed","dataQuality","monthsDays","formClientReturned","updatedFormClient","formClientDemographics","updatedFormClientDemographics","days","subscribe","ngOnInit","monthSelected","event","selectedMonth","clientDobMonth","month","saveUpdatedFormData","updateClient","emit","confirmation","confirm","exitWithoutSavingBtn","nativeElement","setAttribute","dismissModal","removeAttribute","resetFormFields","modalElement","editClientBasicInformationModal","classList","remove","style","display","document","body","modalBackdropElement","querySelector","closeButton","listen","click","ɵɵdirectiveInject","i1","ClientPortalService","i2","ActivatedRoute","Router","Renderer2","selectors","viewQuery","DemographicsEditComponent_Query","rf","ctx","ɵɵtemplate","DemographicsEditComponent_ng_template_0_Template","ɵɵtemplateRefExtractor","DemographicsEditComponent_Template_button_click_2_listener","_r8","_r0","open","ɵɵadvance","ɵɵtextInterpolate","closeResult"],"sources":["/Users/joshjennemann/Desktop/Personal_Projects/Outreach-Mapping-Solutions/outreach-mapping-solutions-FE/src/app/portals/client-portal/client-profile/client-profile-overview/client-profile-overview-demographics/demographics-edit/demographics-edit.component.ts","/Users/joshjennemann/Desktop/Personal_Projects/Outreach-Mapping-Solutions/outreach-mapping-solutions-FE/src/app/portals/client-portal/client-profile/client-profile-overview/client-profile-overview-demographics/demographics-edit/demographics-edit.component.html"],"sourcesContent":["\nimport { Component, ElementRef, OnInit, ViewChild, EventEmitter, Output, Input, Renderer2} from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { ClientDemographics } from 'src/app/models/client-demographics.model';\n\nimport { Client } from 'src/app/models/client.model';\nimport { ClientPortalService } from 'src/app/services/client-portal.service';\n\nimport * as bootstrap from 'bootstrap';\n\n@Component({\n  selector: 'app-demographics-edit',\n  templateUrl: './demographics-edit.component.html',\n  styleUrls: ['./demographics-edit.component.css']\n})\nexport class DemographicsEditComponent implements OnInit{\n  formClientReturned: Client;\n  @Input() updatedFormClient: Client;\n  formClientDemographics: ClientDemographics;\n  @Input() updatedFormClientDemographics: ClientDemographics;\n\n  // clientIdFourDemos: ClientDemographics;\n  dataQuality: string[];\n  monthsDays: {month: string, days: number}[];\n  days: number[];\n  @Output() updatedClient: EventEmitter<Client> = new EventEmitter();\n  @Output() updatedClientDemographics: EventEmitter<ClientDemographics> = new EventEmitter();\n\n  @ViewChild('editClientBasicInformationModal') editClientBasicInformationModal:ElementRef;\n  @ViewChild('exitWithoutSavingBtn') exitWithoutSavingBtn: ElementRef;\n\n  raceSelections: string[] = [\"Black/African-American\", \"White/Caucasian\", \"Asian/Pacific Islander\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\", \"Not Applicable\"];\n  ethnicitySelections: string[] = [\"Hispanic\", \"Non-Hispanic\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\"];\n  genderSelections: string[] = [\"Male\", \"Female\", \"Trans Male-to-Female\", \"Trans Female-to-Male\", \"Non-Binary\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\"];\n  veteranSelections: string[] = [\"Veteran\", \"Not a Veteran\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\", \"Not Applicable\"];\n\nconstructor(private clientPortalService: ClientPortalService, private route: ActivatedRoute, private router: Router, private renderer: Renderer2){\n  this.dataQuality = this.clientPortalService.dataQuality;\n  this.monthsDays = this.clientPortalService.monthsDays;\n  this.formClientReturned = this.updatedFormClient;\n  this.formClientDemographics = this.updatedFormClientDemographics;\n\n\nthis.clientPortalService.days.subscribe((days) => {\n  this.days = days\n  });\n\n}\n\nngOnInit(): void {\n  this.formClientReturned = {...this.updatedFormClient};\n  this.formClientDemographics = {...this.updatedFormClientDemographics};\n  }\n\n  monthSelected(event: Event){\n    this.clientPortalService.selectedMonth(event);\n  }\n  \n  clientDobMonth(month: string){\n    this.clientPortalService.clientDobMonth(month);\n  }\n\n  saveUpdatedFormData() {\n    this.clientPortalService.updateClient(this.formClientReturned);\n    this.updatedClient.emit(this.formClientReturned);\n    this.updatedClientDemographics.emit(this.formClientDemographics);\n  }\n\n\n// confirmation(){\n//     if(confirm(\"Are you sure you want to exit without saving?\")){\n//       this.dismissModal();\n//     } else{\n\n//     }\n//   }\n\nconfirmed=false;\n\n  confirmation() {\n    if (confirm(\"Are you sure you want to exit without saving?\")) {\n      this.exitWithoutSavingBtn.nativeElement.setAttribute('data-bs-dismiss', 'modal');\n      this.dismissModal();\n      this.exitWithoutSavingBtn.nativeElement.removeAttribute('data-bs-dismiss');\n    } else {\n    }\n  }\n  \n\n\n  resetFormFields(){\n    this.formClientReturned = {...this.updatedFormClient};\n    this.formClientDemographics = {...this.updatedFormClientDemographics};\n  }\n  \n\n\n  dismissModal() {\n    this.resetFormFields();\n    const modalElement: HTMLElement = this.editClientBasicInformationModal.nativeElement;\n    modalElement.classList.remove('show');\n    modalElement.style.display = 'none';\n    document.body.classList.remove('modal-open');\n    const modalBackdropElement: HTMLElement | null = document.querySelector('.modal-backdrop');\n    if (modalBackdropElement) {\n      modalBackdropElement.remove();\n    }\n    \n    const closeButton: HTMLElement | null = modalElement.querySelector('.exitWithoutSavingBtn');\n    if (closeButton) {\n      this.renderer.listen(closeButton, 'click', () => {});\n      closeButton.click();\n\n  }\n  }\n\n  \n  \n}\n\n  // dismissModal(){\n  //   this.resetFormFields();\n  //   const modalElement: HTMLElement = this.editClientBasicInformationModal.nativeElement;\n  //   modalElement.classList.remove('show');\n  //   modalElement.style.display = 'none';\n  //   document.body.classList.remove('modal-open');\n  //   const modalBackdropElement: HTMLElement | null = document.querySelector('.modal-backdrop');\n  //   if(modalBackdropElement){\n  //     modalBackdropElement.remove();\n  //   }\n    \n  // }\n  // dismissModal() {\n  //   this.resetFormFields();\n  \n  //   const modalElement: HTMLElement = this.editClientBasicInformationModal.nativeElement;\n  \n  //   // Hide the modal using Bootstrap's JavaScript method\n  //   this.renderer.addClass(modalElement, 'hide');\n  //   this.renderer.removeClass(modalElement, 'show');\n  //   this.renderer.setStyle(modalElement, 'display', 'none');\n  //   this.renderer.removeStyle(modalElement, 'padding-right');\n  //   this.renderer.removeClass(document.body, 'modal-open');\n  //   const modalBackdropElement: HTMLElement | null = document.querySelector('.modal-backdrop');\n  //   if (modalBackdropElement) {\n  //     this.renderer.removeChild(document.body, modalBackdropElement);\n  //   }\n  // }\n\n\n\n// import { Component, ElementRef, OnInit, ViewChild EventEmitter, Output} from '@angular/core';\n// import { ActivatedRoute, Params, Router } from '@angular/router';\n// import { ClientDemographics } from 'src/app/models/client-demographics.model';\n\n// import { Client } from 'src/app/models/client.model';\n// import { ClientPortalService } from 'src/app/services/client-portal.service';\n\n// @Component({\n//   selector: 'app-demographics-edit',\n//   templateUrl: './demographics-edit.component.html',\n//   styleUrls: ['./demographics-edit.component.css']\n// })\n// export class DemographicsEditComponent implements OnInit{\n//   clientReturned: Client;\n//   formClientReturned: Client;\n//   // clientIdFourDemos: ClientDemographics;\n//   dataQuality: string[];\n//   monthsDays: {month: string, days: number}[];\n//   days: number[];\n//   clientDemographics: ClientDemographics;\n//   formClientDemographics: ClientDemographics;\n//   clientReturnedId: number;\n//   @Output() updatedClient: EventEmitter<Client> = new EventEmitter();\n\n//   raceSelections: string[] = [\"Black/African-American\", \"White/Caucasian\", \"Asian/Pacific Islander\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\", \"Not Applicable\"];\n//   ethnicitySelections: string[] = [\"Hispanic\", \"Non-Hispanic\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\"];\n//   genderSelections: string[] = [\"Male\", \"Female\", \"Trans Male-to-Female\", \"Trans Female-to-Male\", \"Non-Binary\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\"];\n//   veteranSelections: string[] = [\"Veteran\", \"Not a Veteran\", \"Client Doesn't Know\", \"Client Refused\", \"Data Not Collected\", \"Not Applicable\"];\n\n//   @ViewChild('editClientBasicInformationModal') editClientBasicInformationModal:ElementRef;\n\n\n// constructor(private clientPortalService: ClientPortalService, private route: ActivatedRoute, private router: Router){\n//   this.dataQuality = this.clientPortalService.dataQuality;\n//   this.monthsDays = this.clientPortalService.monthsDays;\n//   this.clientReturned = this.clientPortalService.getClientReturnedById(this.clientReturnedId);\n//   this.clientDemographics = this.clientPortalService.getClientDemographicsById(this.clientReturnedId);\n//   this.formClientReturned = this.clientPortalService.getClientReturnedById(this.clientReturnedId);\n//   this.formClientDemographics = this.clientPortalService.getClientDemographicsById(this.clientReturnedId);\n\n// this.clientPortalService.days.subscribe((days) => {\n//   this.days = days\n//   });\n\n// }\n\n// ngOnInit(): void {\n//   this.route.params.subscribe((params: Params) => {\n//     this.clientReturnedId = +params['id'];\n//     this.clientReturned = this.clientPortalService.getClientReturnedById(this.clientReturnedId);\n//     this.clientDemographics = this.clientPortalService.getClientDemographicsById(this.clientReturnedId);\n//   })\n//   this.formClientReturned = {...this.clientReturned};\n//   this.formClientDemographics = {...this.clientDemographics};\n//   }\n\n//   monthSelected(event: Event){\n//     this.clientPortalService.selectedMonth(event);\n//   }\n  \n//   clientDobMonth(month: string){\n//     this.clientPortalService.clientDobMonth(month);\n//   }\n\n//   saveUpdatedFormData() {\n//     this.clientPortalService.updateClient(this.formClientReturned);\n//     this.updatedClient.emit(this.formClientReturned);\n//   }\n\n\n// confirmation(){\n//     if(confirm(\"Are you sure you want to exit without saving?\")){\n//       this.resetFormFields();\n//       this.dismissModal();\n//     }else {\n//     }\n//   }\n\n//   resetFormFields(){\n//     this.formClientReturned = {...this.clientReturned};\n//     this.formClientDemographics = {...this.clientDemographics};\n//   }\n\n//   dismissModal(){\n//     this.resetFormFields();\n//     const modalElement: HTMLElement = this.editClientBasicInformationModal.nativeElement;\n//     modalElement.classList.remove('show');\n//     modalElement.style.display = 'none';\n//     document.body.classList.remove('modal-open');\n//     const modalBackdropElement: HTMLElement | null = document.querySelector('.modal-backdrop');\n//     if(modalBackdropElement){\n//       modalBackdropElement.remove();\n//     }\n    \n//   }\n\n//   // dismissModal() {\n//   //   this.resetFormFields();\n  \n//   //   const modalElement: HTMLElement = this.editClientBasicInformationModal.nativeElement;\n  \n//   //   // Hide the modal using Bootstrap's JavaScript method\n//   //   this.renderer.addClass(modalElement, 'hide');\n//   //   this.renderer.removeClass(modalElement, 'show');\n//   //   this.renderer.setStyle(modalElement, 'display', 'none');\n//   //   this.renderer.removeStyle(modalElement, 'padding-right');\n//   //   this.renderer.removeClass(document.body, 'modal-open');\n//   //   const modalBackdropElement: HTMLElement | null = document.querySelector('.modal-backdrop');\n//   //   if (modalBackdropElement) {\n//   //     this.renderer.removeChild(document.body, modalBackdropElement);\n//   //   }\n//   // }\n  \n// }","<ng-template #content let-modal>\n\t<div class=\"modal-header\">\n\t\t<h4 class=\"modal-title\" id=\"modal-basic-title\">Profile update</h4>\n\t\t<button type=\"button\" class=\"btn-close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\"></button>\n\t</div>\n\t<div class=\"modal-body\">\n\t\t<form>\n\t\t\t<div class=\"mb-3\">\n\t\t\t\t<label for=\"dateOfBirth\">Date of birth</label>\n\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"dateOfBirth\"\n\t\t\t\t\t\tclass=\"form-control\"\n\t\t\t\t\t\tplaceholder=\"yyyy-mm-dd\"\n\t\t\t\t\t\tname=\"dp\"\n\t\t\t\t\t\tngbDatepicker\n\t\t\t\t\t\t#dp=\"ngbDatepicker\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button class=\"btn btn-outline-secondary bi bi-calendar3\" (click)=\"dp.toggle()\" type=\"button\"></button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</form>\n\t</div>\n\t<div class=\"modal-footer\">\n\t\t<button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"modal.close('Save click')\">Save</button>\n\t</div>\n</ng-template>\n\n<button class=\"btn btn-lg btn-outline-primary\" (click)=\"open(content)\">Launch demo modal</button>\n\n<hr />\n\n<pre>{{ closeResult }}</pre>\n\n<!-- <div class=\"modal fade\" #editClientBasicInformationModal id=\"editClientBasicInformationModal\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog modal-fullscreen\">\n        <div class=\"modal-content\">\n        <div class=\"modal-header\">\n            <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Edit Client Basic Information</h1>\n        </div>\n        <div class=\"modal-body\">\n            <div class=\"container-fluid\">\n    \n                <form #form=\"ngForm\" class=\"row g-1 border\">\n                    <div class=\"row my-3\">\n                        <div class=\"col-md-4\">\n                            <label for=\"inputFirstName\" class=\"form-label mb-0\" >First Name:</label>\n                            <input type=\"text\" class=\"form-control\" id=\"inputFirstName\" name=\"firstName\" [(ngModel)]=\"formClientReturned.firstName\"  >\n                        </div>\n                        <div class=\"col-md-4\">\n                            <label for=\"inputMiddleName\" class=\"form-label mb-0\">Middle Name:</label>\n                            <input type=\"text\" class=\"form-control\" id=\"inputMiddleName\"  name=\"middleName\" [(ngModel)]=\"formClientReturned.middleName\">\n                            </div>\n                        <div class=\"col-md-4\">\n                            <label for=\"inputLastName\" class=\"form-label mb-0\">Last Name:</label>\n                            <input type=\"text\" class=\"form-control\" id=\"inputLastName\" name=\"lastName\" [(ngModel)]=\"formClientReturned.lastName\">\n                        </div> \n                    </div>\n                    <div class=\"row my-3\">\n                        <label for=\"nameDataQuality\" class=\"form-label mb-0\">Name Data Quality:</label>\n                        <div class=\"col-md-6\">\n                            <select id=\"nameDataQuality\" class=\"form-select\">\n                                <option Selected>Please Select..</option>\n                                <option *ngFor=\"let dataQualityElement of dataQuality\"> {{  dataQualityElement }}</option>\n                            </select>\n                        </div>\n                    </div>\n                    \n                  <div class=\"row my-3\">\n                    <label  class=\"form-label mb-0\">Date of Birth:</label>\n                    <div class=\"col-md-5\">\n                        <select class=\"form-select\"  (change)=\"monthSelected($event)\" name=\"dobMonth\" [(ngModel)]=\"formClientReturned.dobMonth\">\n                            <option Selected>{{formClientReturned.dobMonth}}</option>\n                            <option *ngFor=\"let monthDay of monthsDays\"> {{ monthDay.month }}</option>\n                        </select>\n                    </div>\n                    <div class=\"col-md-3\">\n                        <select class=\"form-select\" name=\"dobDay\" [(ngModel)]=\"formClientReturned.dobDay\">\n                            <option Selected>{{formClientReturned.dobDay}}</option>\n                            <option *ngFor=\"let day of days\">{{ day }}</option>\n                        </select>\n                    </div>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\"  minLength=\"4\" maxLength=\"4\" name=\"dobYear\" placeholder=\"YYYY\" [(ngModel)]=\"formClientReturned.dobYear\">\n                    </div>\n                    </div>\n                  <div class=\"row my-3\">\n                    <label for=\"dobDataQuality\" class=\"form-label mb-0\">Date of Birth Data Quality:</label>\n                    <div class=\"col-md-6\">\n                      <select id=\"dobDataQuality\"class=\"form-select\">\n                        <option Selected>Please Select..</option>\n                        <option *ngFor=\"let dataQualityElement of dataQuality\"> {{  dataQualityElement }}</option>\n                      </select>\n                    </div>\n                  </div>\n                   \n                  <div class=\"row my-3\">\n                    <label class=\"form-label mb-0\">Social Security Number:</label>\n                    <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" maxlength=\"3\" placeholder=\"123\" name=\"firstThreeSsn\" [(ngModel)]=\"formClientReturned.firstThreeSsn\">\n                      </div>\n                      <div class=\"col-md-2\">\n                          <input type=\"text\" class=\"form-control\" maxlength=\"2\" placeholder=\"45\" name=\"middleTwoSsn\" [(ngModel)]=\"formClientReturned.middleTwoSsn\">\n                        </div>\n                      <div class=\"col-md-4\">\n                        <input type=\"text\" class=\"form-control\" maxlength=\"4\" placeholder=\"6789\" name=\"lastFourSsn\" [(ngModel)]=\"formClientReturned.lastFourSsn\">\n                      </div>\n                  </div>\n                  <div class=\"row my-3\">\n                    <label for=\"ssnDataQuality\" class=\"form-label mb-0\">Social Security Data Quality:</label>\n                    <div class=\"col-md-6\">\n                      <select id=\"ssnDataQuality\"class=\"form-select\">\n                        <option Selected>Please Select..</option>\n                        <option *ngFor=\"let dataQualityElement of dataQuality\"> {{  dataQualityElement }}</option>\n                      </select>\n                    </div>\n                  </div>\n                      \n                  <div class=\"row my-3\">\n                    <div class=\"col-md-4\">\n                    <label  class=\"form-label mb-0\">Gender:</label>\n                      <select class=\"form-select\" name=\"gender\" [(ngModel)]=\"formClientDemographics.gender\" >\n                        <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                        <option *ngFor=\"let gender of genderSelections\">{{ gender }}</option>\n                      </select>\n                    </div>\n                  </div>\n    \n                  <div class=\"row my-3\">\n                    <div class=\"col-md-4\">\n                    <label  class=\"form-label mb-0\">Race (Primary):</label>\n                      <select class=\"form-select\" name=\"racePrimary\" [(ngModel)]=\"formClientDemographics.racePrimary\">\n                        <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                        <option *ngFor=\"let race of raceSelections\"> {{ race }}</option>\n                      </select>\n                    </div>\n                    <div class=\"col-md-4\">\n                    <label  class=\"form-label mb-0\">Race (Secondary):</label>\n                      <select class=\"form-select\" name=\"raceSecondary\" [(ngModel)]=\"formClientDemographics.raceSecondary\">\n                        <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                        <option *ngFor=\"let race of raceSelections\"> {{ race }}</option>\n                      </select>\n                    </div>\n                    <div class=\"col-md-4\">\n                    <label  class=\"form-label mb-0\">Ethnicity:</label>\n                      <select class=\"form-select\" name=\"ethnicity\" [(ngModel)]=\"formClientDemographics.ethnicity\">\n                        <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                        <option *ngFor=\"let ethnicity of ethnicitySelections\"> {{ ethnicity }}</option>\n                      </select>\n                    </div>\n                  </div>\n    \n                  <div class=\"row my-3\">\n                    <div class=\"col-md-4\">\n                    <label  class=\"form-label mb-0\">Veteran Status:</label>\n                      <select class=\"form-select\" name=\"veteran\" [(ngModel)]=\"formClientDemographics.veteran\" >\n                        <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                        <option *ngFor=\"let veteranStatus of veteranSelections\">{{ veteranStatus }}</option>\n                      </select>\n                    </div>\n                  </div>\n    \n              </form>\n    \n              </div>\n            </div>\n            <div class=\"modal-footer\">\n              <button type=\"button\" class=\"btn btn-secondary exitWithoutSavingBtn\" aria-label=\"Close\" (click)=\"confirmation()\" #exitWithoutSavingBtn>Exit without Saving</button>\n              <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" (click)=\"saveUpdatedFormData()\">Save Updated Info</button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n<!-- \n      <div class=\"modal fade\" #editClientBasicInformationModal id=\"editClientBasicInformationModal\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog modal-fullscreen\">\n            <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h1 class=\"modal-title fs-5\" id=\"staticBackdropLabel\">Edit Client Basic Information</h1>\n            </div>\n            <div class=\"modal-body\">\n                <div class=\"container-fluid\">\n        \n                    <form #form=\"ngForm\" class=\"row g-1 border\">\n                        <div class=\"row my-3\">\n                            <div class=\"col-md-4\">\n                                <label for=\"inputFirstName\" class=\"form-label mb-0\" >First Name:</label>\n                                <input type=\"text\" class=\"form-control\" id=\"inputFirstName\" name=\"firstName\" [(ngModel)]=\"formClientReturned.firstName\"  >\n                            </div>\n                            <div class=\"col-md-4\">\n                                <label for=\"inputMiddleName\" class=\"form-label mb-0\">Middle Name:</label>\n                                <input type=\"text\" class=\"form-control\" id=\"inputMiddleName\"  name=\"middleName\" [(ngModel)]=\"formClientReturned.middleName\">\n                                </div>\n                            <div class=\"col-md-4\">\n                                <label for=\"inputLastName\" class=\"form-label mb-0\">Last Name:</label>\n                                <input type=\"text\" class=\"form-control\" id=\"inputLastName\" name=\"lastName\" [(ngModel)]=\"formClientReturned.lastName\">\n                            </div> \n                        </div>\n                        <div class=\"row my-3\">\n                            <label for=\"nameDataQuality\" class=\"form-label mb-0\">Name Data Quality:</label>\n                            <div class=\"col-md-6\">\n                                <select id=\"nameDataQuality\" class=\"form-select\">\n                                    <option Selected>Please Select..</option>\n                                    <option *ngFor=\"let dataQualityElement of dataQuality\"> {{  dataQualityElement }}</option>\n                                </select>\n                            </div>\n                        </div>\n                        \n                      <div class=\"row my-3\">\n                        <label  class=\"form-label mb-0\">Date of Birth:</label>\n                        <div class=\"col-md-5\">\n                            <select class=\"form-select\"  (change)=\"monthSelected($event)\" name=\"dobMonth\" [(ngModel)]=\"formClientReturned.dobMonth\">\n                                <option Selected>{{formClientReturned.dobMonth}}</option>\n                                <option *ngFor=\"let monthDay of monthsDays\"> {{ monthDay.month }}</option>\n                            </select>\n                        </div>\n                        <div class=\"col-md-3\">\n                            <select class=\"form-select\" name=\"dobDay\" [(ngModel)]=\"formClientReturned.dobDay\">\n                                <option Selected>{{formClientReturned.dobDay}}</option>\n                                <option *ngFor=\"let day of days\">{{ day }}</option>\n                            </select>\n                        </div>\n                        <div class=\"col-md-4\">\n                            <input type=\"text\" class=\"form-control\"  minLength=\"4\" maxLength=\"4\" name=\"dobYear\" placeholder=\"YYYY\" [(ngModel)]=\"formClientReturned.dobYear\">\n                        </div>\n                        </div>\n                      <div class=\"row my-3\">\n                        <label for=\"dobDataQuality\" class=\"form-label mb-0\">Date of Birth Data Quality:</label>\n                        <div class=\"col-md-6\">\n                          <select id=\"dobDataQuality\"class=\"form-select\">\n                            <option Selected>Please Select..</option>\n                            <option *ngFor=\"let dataQualityElement of dataQuality\"> {{  dataQualityElement }}</option>\n                          </select>\n                        </div>\n                      </div>\n                       \n                      <div class=\"row my-3\">\n                        <label class=\"form-label mb-0\">Social Security Number:</label>\n                        <div class=\"col-md-4\">\n                            <input type=\"text\" class=\"form-control\" maxlength=\"3\" placeholder=\"123\" name=\"firstThreeSsn\" [(ngModel)]=\"formClientReturned.firstThreeSsn\">\n                          </div>\n                          <div class=\"col-md-2\">\n                              <input type=\"text\" class=\"form-control\" maxlength=\"2\" placeholder=\"45\" name=\"middleTwoSsn\" [(ngModel)]=\"formClientReturned.middleTwoSsn\">\n                            </div>\n                          <div class=\"col-md-4\">\n                            <input type=\"text\" class=\"form-control\" maxlength=\"4\" placeholder=\"6789\" name=\"lastFourSsn\" [(ngModel)]=\"formClientReturned.lastFourSsn\">\n                          </div>\n                      </div>\n                      <div class=\"row my-3\">\n                        <label for=\"ssnDataQuality\" class=\"form-label mb-0\">Social Security Data Quality:</label>\n                        <div class=\"col-md-6\">\n                          <select id=\"ssnDataQuality\"class=\"form-select\">\n                            <option Selected>Please Select..</option>\n                            <option *ngFor=\"let dataQualityElement of dataQuality\"> {{  dataQualityElement }}</option>\n                          </select>\n                        </div>\n                      </div>\n                          \n                      <div class=\"row my-3\">\n                        <div class=\"col-md-4\">\n                        <label  class=\"form-label mb-0\">Gender:</label>\n                          <select class=\"form-select\" name=\"gender\" [(ngModel)]=\"formClientDemographics.gender\" >\n                            <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                            <option *ngFor=\"let gender of genderSelections\">{{ gender }}</option>\n                          </select>\n                        </div>\n                      </div>\n        \n                      <div class=\"row my-3\">\n                        <div class=\"col-md-4\">\n                        <label  class=\"form-label mb-0\">Race (Primary):</label>\n                          <select class=\"form-select\" name=\"racePrimary\" [(ngModel)]=\"formClientDemographics.racePrimary\">\n                            <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                            <option *ngFor=\"let race of raceSelections\"> {{ race }}</option>\n                          </select>\n                        </div>\n                        <div class=\"col-md-4\">\n                        <label  class=\"form-label mb-0\">Race (Secondary):</label>\n                          <select class=\"form-select\" name=\"raceSecondary\" [(ngModel)]=\"formClientDemographics.raceSecondary\">\n                            <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                            <option *ngFor=\"let race of raceSelections\"> {{ race }}</option>\n                          </select>\n                        </div>\n                        <div class=\"col-md-4\">\n                        <label  class=\"form-label mb-0\">Ethnicity:</label>\n                          <select class=\"form-select\" name=\"ethnicity\" [(ngModel)]=\"formClientDemographics.ethnicity\">\n                            <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                            <option *ngFor=\"let ethnicity of ethnicitySelections\"> {{ ethnicity }}</option>\n                          </select>\n                        </div>\n                      </div>\n        \n                      <div class=\"row my-3\">\n                        <div class=\"col-md-4\">\n                        <label  class=\"form-label mb-0\">Veteran Status:</label>\n                          <select class=\"form-select\" name=\"veteran\" [(ngModel)]=\"formClientDemographics.veteran\" >\n                            <option [value]=\"undefined\" disabled selected>Please Select...</option>\n                            <option *ngFor=\"let veteranStatus of veteranSelections\">{{ veteranStatus }}</option>\n                          </select>\n                        </div>\n                      </div>\n        \n                  </form>\n        \n                  </div>\n                </div>\n                <div class=\"modal-footer\">\n                  <button type=\"button\" class=\"btn btn-secondary exitWithoutSavingBtn\" aria-label=\"Close\" (click)=\"confirmation()\" #exitWithoutSavingBtn>Exit without Saving</button>\n                  <button type=\"button\" class=\"btn btn-primary\" data-bs-dismiss=\"modal\" (click)=\"saveUpdatedFormData()\">Save Updated Info</button>\n                </div>\n              </div>\n            </div>\n          </div> --> -->"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}